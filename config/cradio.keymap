// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Lower row mods macro
// define LMLR(k1,k2,k3) &ht LCTRL k1  &ht LALT k2  &ht LSHFT k3

/ {
    combos {
        compatible = "zmk,combos";
    };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E  &kp R         &kp T       &kp Y        &kp U        &kp I      &kp O    &kp P
&mt LEFT_SHIFT A  &kp S           &kp D  &kp F         &kp G       &kp H        &kp J        &kp K      &kp L    &mt LEFT_SHIFT SINGLE_QUOTE
&mt LCTRL Z       &mt LEFT_ALT X  &kp C  &kp V         &kp B       &lt 3 N      &lt 4 M      &kp COMMA  &kp DOT  &mt RCTRL SLASH
                                         &mt LGUI ESC  &kp BSPC    &lt 2 SPACE  &lt 1 ENTER
            >;
        };

        symbols {
            bindings = <
&kp GRAVE             &kp EXCLAMATION        &kp AT_SIGN       &kp HASH           &kp DOLLAR       &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp STAR  &kp UNDERSCORE
&kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH    &kp SEMICOLON  &kp COLON  &trans         &trans    &kp LEFT_SHIFT
&trans                &trans                 &trans            &trans             &trans           &trans         &trans     &trans         &trans    &trans
                                                               &kp TAB            &kp DEL          &trans         &trans
            >;
        };

        numeric {
            bindings = <
&trans  &kp N7  &kp N8  &kp N9  &kp PLUS     &trans    &trans    &trans  &trans     &trans
&trans  &kp N4  &kp N5  &kp N6  &kp MINUS    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&kp N0  &kp N1  &kp N2  &kp N3  &kp EQUAL    &trans    &trans    &trans  &trans     &trans
                        &trans  &trans       &trans    &trans
            >;
        };

        media_layer {
            bindings = <
&kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP    &kp C_PLAY    &trans  &trans  &trans  &trans  &trans
&kp C_BRI_DN  &kp C_BRI_UP  &trans        &kp C_PREV  &kp C_NEXT    &trans  &trans  &trans  &trans  &trans
&kp PSCRN     &trans        &trans        &trans      &trans        &trans  &trans  &trans  &trans  &trans
                                          &trans      &trans        &trans  &trans
            >;
        };

        func_layer {
            bindings = <
&kp F11  &kp F12  &kp F13  &kp F14  &kp F15      &trans    &trans  &trans  &trans  &trans
&kp F6   &kp F7   &kp F8   &kp F9   &kp F10      &trans    &trans  &trans  &trans  &trans
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5       &trans    &trans  &trans  &trans  &trans
                           &trans   &kp LCTRL    &kp LALT  &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &out OUT_TOG  &bt BT_SEL 4  &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans        &bt BT_SEL 5  &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans        &bt BT_CLR    &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                                   &trans        &trans          &trans  &trans
            >;
        };
    };
};
